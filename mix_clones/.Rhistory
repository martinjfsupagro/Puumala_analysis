dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab_nochim))
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 230
MAXLEN <- 240
seqtab_nochim.length_filt <- seqtab_nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab_nochim.length_filt[,abundances >= MINABUND]
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
View(asvs.table)
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(140,140), maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 230
MAXLEN <- 240
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(120,120), maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(120,120), maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, truncLen=c(130,130), maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 230
MAXLEN <- 240
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnRs[1:2])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=TRUE)
dadaRs <- dada(derepRs, err=errR, multithread=TRUE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
head(mergers[[1]])
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 230
MAXLEN <- 240
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path)
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:2])
plotQualityProfile(fnFs[1:6])
plotQualityProfile(fnRs[1:6])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=FALSE)
dadaFs[[1:6]]
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
mergers[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="consensus", multithread=TRUE, verbose=TRUE)
dim(seqtab.nochim)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="per-sample", multithread=TRUE, verbose=TRUE)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="per-sample", multithread=TRUE, verbose=FALSE)
seqtab.nochim <- removeBimeraDenovo(seqtab, method="per-sample", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 0
MAXLEN <- 500
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
list.files(path, pattern="*.fastq.gz")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path, pattern="*.fastq.gz")
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path, pattern="*.fastq.gz")
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:6])
plotQualityProfile(fnRs[1:6])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=FALSE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
# Inspect the merger data.frame from the first sample
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="per-sample", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 0
MAXLEN <- 500
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path, pattern="*.fastq.gz")
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:6])
plotQualityProfile(fnRs[1:6])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=FALSE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="per-sample", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 0
MAXLEN <- 500
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path, pattern="*.fastq.gz")
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:6])
plotQualityProfile(fnRs[1:6])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=FALSE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="per-sample", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 0
MAXLEN <- 500
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
head(track)
track
library(dada2); packageVersion("dada2")
path <- setwd("C:/Users/martinjf/Desktop/Travail/Recherche/Projets/Guillaume -puumala/Puumala_analysis/mix_clones/")
list.files(path, pattern="*.fastq.gz")
# Forward and reverse fastq filenames have format: SAMPLENAME_R1_001.fastq and SAMPLENAME_R2_001.fastq
fnFs <- sort(list.files(path, pattern="_R1_001.fastq.gz", full.names = TRUE))
fnRs <- sort(list.files(path, pattern="_R2_001.fastq.gz", full.names = TRUE))
# Extract sample names, assuming filenames have format: SAMPLENAME_XXX.fastq.gz
sample.names <- sapply(strsplit(basename(fnFs), "_"), `[`, 1)
plotQualityProfile(fnFs[1:6])
plotQualityProfile(fnRs[1:6])
# Place filtered files in filtered/ subdirectory
filtFs <- file.path(path, "filtered", paste0(sample.names, "_F_filt.fastq.gz"))
filtRs <- file.path(path, "filtered", paste0(sample.names, "_R_filt.fastq.gz"))
out <- filterAndTrim(fnFs, filtFs, fnRs, filtRs, maxN=0, rm.phix=TRUE, compress=TRUE, multithread=FALSE) # On Windows set multithread=FALSE
out
errF <- learnErrors(filtFs, multithread=TRUE)
errR <- learnErrors(filtRs, multithread=TRUE)
plotErrors(errF, nominalQ=TRUE)
derepFs <- derepFastq(filtFs, verbose=TRUE)
derepRs <- derepFastq(filtRs, verbose=TRUE)
# Name the derep-class objects by the sample names
names(derepFs) <- sample.names
names(derepRs) <- sample.names
dadaFs <- dada(derepFs, err=errF, multithread=FALSE)
dadaRs <- dada(derepRs, err=errR, multithread=FALSE)
dadaFs[[1]]
mergers <- mergePairs(dadaFs, derepFs, dadaRs, derepRs, verbose=TRUE)
seqtab <- makeSequenceTable(mergers)
dim(seqtab)
# Inspect distribution of sequence lengths
table(nchar(getSequences(seqtab)))
seqtab.nochim <- removeBimeraDenovo(seqtab, method="per-sample", multithread=FALSE, verbose=TRUE)
dim(seqtab.nochim)
sum(seqtab.nochim)/sum(seqtab)
# Assumes seqtab_nochim is your sequence table of merged sequences
seqlens <- nchar(getSequences(seqtab.nochim))
plot(sort(seqlens))
MINLEN <- 0
MAXLEN <- 500
seqtab.nochim.length_filt <- seqtab.nochim[,seqlens >= MINLEN & seqlens <= MAXLEN]
dim(seqtab.nochim.length_filt)
seqlens_filt <- nchar(getSequences(seqtab.nochim.length_filt))
plot(sort(seqlens_filt))
abundances <- colSums(seqtab.nochim.length_filt)
plot(sort(abundances))
MINABUND <- 1
seqtab.nochim.length_abundance_filt <- seqtab.nochim.length_filt[,abundances >= MINABUND]
dim(seqtab.nochim.length_abundance_filt)
asvs.table <- seqtab.nochim.length_abundance_filt
saveRDS(asvs.table, "./asvs_table.rds") # CHANGE ME to where you want sequence table saved
uniquesToFasta(asvs.table, fout="asvs.fasta")
getN <- function(x) sum(getUniques(x))
track <- cbind(out, sapply(dadaFs, getN), sapply(dadaRs, getN), sapply(mergers, getN), rowSums(seqtab.nochim))
# If processing a single sample, remove the sapply calls: e.g. replace sapply(dadaFs, getN) with getN(dadaFs)
colnames(track) <- c("input", "filtered", "denoisedF", "denoisedR", "merged", "nonchim")
rownames(track) <- sample.names
track
